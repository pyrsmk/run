#!/usr/bin/ruby

# TODO
# - add version header and verify version against the one installed + auto-update
# - auto-completion
# - improve colorization with simple functions: "foo".yellow

require "digest"
require "open-uri"

VERSION = "0.4.0"

@tasks = Hash.new

# Define a task.
def task(name, help = "", &block)
  if !name.is_a?(Symbol)
    puts "first task parameter must be a symbol"
    exit 1
  end
  if !help.is_a?(String)
    puts "second task parameter must be a string"
    exit 1
  end
  @tasks.store(name, { :help => help, :block => block })
end

# Call a task.
def call(name)
  @tasks[name][:block].call
end

# Run a shell command that will fail the tasks if it fails itself. It also add the
# ability to interect with the command, contrary to backticks syntax.
def shell(command)
  puts
  puts "#{">".colorize(:yellow)} #{command}"
  puts
  if system(command) === false
    exit 1
  end
end

def require_remote(uri)
  cache_path = "/tmp/#{Digest::MD5.hexdigest(uri)}"
  begin
    File.write(cache_path, URI.parse(uri).open.read)
  ensure
    raise "Unable to load #{uri}" if !File.exists? cache_path
    begin
      eval File.read(cache_path)
    rescue SyntaxError => error
      puts error.message.colorize(:red)
    end
  end
end

def arguments
  ARGV.slice(1..)
end

##########################################################################################

class String
  def colorize(color)
    colors = {
      :black   => 30,
      :red     => 31,
      :green   => 32,
      :yellow  => 33,
      :blue    => 34,
      :magenta => 35,
      :cyan    => 36,
      :white   => 37,
    }
    "\033[#{colors[color.to_sym]}m#{self}\033[0m"
  end
end

##########################################################################################

RUNFILE = "Runfile.rb"

if !File.exists?(RUNFILE)
  puts "#{RUNFILE} does not exist"
  exit 1
end

require "./#{RUNFILE}"

##########################################################################################

# Show the help screen if there is no provided task, or if it's explicitly requested.
if ARGV.size == 0 || (ARGV.size == 1 && ARGV[0] == "help")
  puts
  puts " run v#{VERSION}"
  puts
  @tasks.sort.to_h.each do |name, task|
    puts " #{name}#{" " * (35 - name.size)}#{task[:help]}"
  end
  exit
end

# Run the requested tasks.
name = ARGV[0].to_sym
if !@tasks.include?(name)
  puts "Unknown '#{name}' task"
  exit 1
end
call name
